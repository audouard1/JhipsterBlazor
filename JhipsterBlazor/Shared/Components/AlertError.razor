@using System.Net
@using SharedModel.Models
@using Toolbelt.Blazor

@inject HttpClientInterceptor Interceptor

<div class="alerts" role="alert">
    @foreach(var alert in Alerts)
    {
        <div>
            @if(alert != null && !string.IsNullOrEmpty(alert.Type)  && !string.IsNullOrEmpty(alert.Msg))
            {
                <div type="@alert.Type">
                    <pre>@((MarkupString)alert.Msg)</pre>
                </div>
            }
        </div>
    }

</div>

@code {

    private List<JhiAlert> Alerts { get; set; }

    protected override Task OnInitializedAsync()
    {
        Alerts = new List<JhiAlert>();
        Interceptor.AfterSend += HandleErrors;
        return base.OnInitializedAsync();
    }

    private void HandleErrors(object s, HttpClientInterceptorEventArgs e)
    {
        if (e.Response?.IsSuccessStatusCode == true)
        {
            return;
        }
        if (e.Response == null)
        {
            AddErrorAlert("Server not reachable");
            return;
        }
        switch (e.Response.StatusCode)
        {
            case HttpStatusCode.BadRequest:
                var errorHandler = "";
                foreach (var httpResponseHeader in e.Response.Headers)
                {
                    if (httpResponseHeader.Key.EndsWith("app-error"))
                    {
                        errorHandler = httpResponseHeader.Key;
                    }
                }
                if (errorHandler != "")
                {
                    AddErrorAlert(errorHandler);
                }
                break;
            case HttpStatusCode.NotFound:
                AddErrorAlert("Not found");
                break;
            default:
                AddErrorAlert(e.Response.Content.ToString());
                break;
        }
    }

    private void AddErrorAlert(string ErrorMsg)
    {
        Alerts.Add(new JhiAlert
        {
            Type = "danger",
            Msg = ErrorMsg,
            Timeout = 5000,
            Scoped = true
        });
        StateHasChanged();
    }

}
